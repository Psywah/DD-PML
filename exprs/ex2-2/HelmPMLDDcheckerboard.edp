
load "UMFPACK64"
load "MUMPS_seq"
include "getARGV.idp"
func vel = 1;//Ovt(x,y,z);  // km/s

real t = clock();
real freq = getARGV("-frequency",0.5); // Hz
real k = 2.*pi*freq/vel;
k = getARGV("-wavenumber", k);
real lambda = 2.*pi/k;

cout << "running time: "<<clock()-t<<"  get k"<< endl;
cout << "lambda = " << lambda << endl;
cout << "wave number = " << k << endl;

// dimensions of the domain
real height = 1.;
real length = 1.;

// 10 ppwl
real nppwl = 2.*pi*pow(k,0.25);//10  // can be adjusted to pollution-free 2.*pi*k^{1/2p} : lambda/nppwl = h = k^{-1-1/2p}
int  npl = ceil(nppwl*(height)/lambda);
npl = npl>80? npl:80;
npl = npl+npl%2;  // number of elements in each direction is even 
                     // so that the point source in the center coincides with a mesh vertex
// length of the pml
real h = height/npl;
real lengthpml = getARGV("-lengthpml", 0.1);
int  layerspml = ceil(lengthpml/h);//getARGV("-deltapml",2);//lambda/h/2; // can be adjusted
lengthpml = h*layerspml;
cout << "height = "<< height <<", length = "<<length<<", lengthpml = "<< lengthpml << ", layerspml = " << layerspml << endl;
cout << "nppwl = " << nppwl << ", h = "<< h << ", k to (-1-1/2p) = "<< pow(k, - 1.25)<< endl;

// generate mesh
int nply = npl + 2*layerspml;
int nplx = (length+2*lengthpml)/h;
mesh Th = square(nplx, nply, [x*(length+2*lengthpml)-lengthpml, y*(height+2*lengthpml)-lengthpml]);


cout << "running time: "<<clock()-t<<"  get mesh"<< endl;
// boundary label
int borderg = 2;
int[int] chlabpml=[1, borderg, 2, borderg, 3, borderg, 4, borderg];
Th=change(Th,refe=chlabpml);

real epst = 1e-10;

int pmli = 1; // switch between impedance and pml for the subdomain interfaces
int pmlg = 1; // switch between impedance and pml for the global boundary

// pml location and size for the subdomain interfaces. It will be set in the preconditioner assembly
real lengthpmli=lengthpml, xia, xib, yia, yib;

/*
//macro PMLoption 1
//IFMACRO(PMLoption, 1)
    // pml for the subdomain interface
    func sigmaix = pmli * ( (x>=xib)/max(epst,(xib+lengthpmli-x)*k)  +  (x<=xia)/max(epst,(x + lengthpmli-xia)*k) );
    func sigmaiy = pmli * ( (y>=yib)/max(epst,(yib+lengthpmli-y)*k)  +  (y<=yia)/max(epst,(y + lengthpmli-yia)*k) );

    // pml for the global boundaries
    func sigmagx = pmlg * ( (x>=length)/max(epst,(length+lengthpml-x)*k)  +  (x<=0)/max(epst,(x + lengthpml)*k) );
    func sigmagy = pmlg * ( (y>=height)/max(epst,(height+lengthpml-y)*k)  +  (y<=0)/max(epst,(y + lengthpml)*k) );
//ENDIFMACRO
*/

real apml = getARGV("-apml", 1000.0);
//apml = k^2.5;
    func sigmaix = pmli * ( (x>=xib)*(x-xib)*(x-xib)  +  (x<=xia)*(x-xia)*(x-xia))*apml;
    func sigmaiy = pmli * ( (y>=yib)*(y-yib)*(y-yib)  +  (y<=yia)*(y-yia)*(y-yia))*apml;

    // pml for the global boundaries
    func sigmagx = pmlg * ( (x>=length)*(x-length)*(x-length)  +  (x<=0)*x*x )*apml;
    func sigmagy = pmlg * ( (y>=height)*(y-height)*(y-height)  +  (y<=0)*y*y )*apml;
    func dsigmaix = pmli * 2*( (x>=xib)*(x-xib)  +  (x<=xia)*(x-xia))*apml;
    func dsigmaiy = pmli * 2*( (y>=yib)*(y-yib)  +  (y<=yia)*(y-yia))*apml;

    // pml for the global boundaries
    func dsigmagx = pmlg * 2*( (x>=length)*(x-length)  +  (x<=0)*x )*apml;
    func dsigmagy = pmlg * 2*( (y>=height)*(y-height)  +  (y<=0)*y )*apml;



func Pk = P2;  
fespace Vh(Th,P2);        // P1 fem space
//Vh sigmagxh=sigmagx, sigmagyh=sigmagy;
//plot(sigmagxh,wait=1,fill=1,dim=2,value=1);
//plot(sigmagyh,wait=1,fill=1,dim=2,value=1);

// take the max value of sigma of the two pmls (global boundary and subdomain boundary) for the preconditioner
func sigmax = max ( sigmaix, sigmagx );
func sigmay = max ( sigmaiy, sigmagy );
func dsigmax = max ( dsigmaix, dsigmagx );
func dsigmay = max ( dsigmaiy, dsigmagy );

// point source in the center of the domain
int npart = getARGV("-npart", 2);
int npartx = getARGV("-npartx", 2); // for checkerboard
IFMACRO(!DS)
    macro DS 1 //
ENDIFMACRO
IFMACRO(DS, 1)
    real xs = length/2.;
    real ys = height/2.;
ENDIFMACRO
IFMACRO(DS, 2)
    real xs = length/16.;
    real ys = height/16.;
ENDIFMACRO

// remove singularity at the source when computing error and plotting
func supp = sqrt((x-xs)^2+(y-ys)^2) > lambda;

// exact solution
func exact = supp*1i*(j0(k*sqrt((x-xs)^2+(y-ys)^2))+1i*y0(k*sqrt((x-xs)^2+(y-ys)^2)))/4;

macro Grad(u) [dx(u),dy(u)] // EOM

// gradient for the operator
macro Gradpmlg(u) [(1.)/(1.+1i*sigmagx)^2*dx(u),
                   (1.)/(1.+1i*sigmagy)^2*dy(u)] // EOM

// gradient for the preconditioner
macro Gradpml(u) [(1.)/(1.+1i*sigmax)^2*dx(u),
                  (1.)/(1.+1i*sigmay)^2*dy(u)] // EOM

macro betaDotGradg(u) ((1i*dsigmagx)/(1.+1i*sigmagx)^3*dx(u)+
                  (1i*dsigmagy)/(1.+1i*sigmagy)^3*dy(u)) // EOM
macro betaDotGrad(u) ((1i*dsigmaix)/(1.+1i*sigmax)^3*dx(u)+
                  (1i*dsigmaiy)/(1.+1i*sigmay)^3*dy(u)) // EOM
// Definition of the problem to solve
func f = j0(k*sqrt((x-xs)^2+(y-ys)^2));

func innerCir = sqrt((x-.5)^2+(y-.5)^2) <= 0.4;
func dist = 0.4 -sqrt((x-.5)^2+(y-.5)^2);
IFMACRO(!NN)
    macro NN 1 //
ENDIFMACRO
IFMACRO(NN, 1)
    func nn = 1;
ENDIFMACRO
IFMACRO(NN, 2)
    func nn = 1. + innerCir *dist*2.5;
ENDIFMACRO
IFMACRO(NN, 3)
    func nn = 1. - innerCir *dist*1.25 ;
ENDIFMACRO

fespace Ph(Th,P0);        // P1 fem space

Ph plotc = nn;
plot(plotc, cmm="wave velocity", value=1, fill=1,wait=1);
load "iovtk"
int[int] Order = [1];
string DataName = "nn";
savevtk("nn.vtu", Th, plotc, dataname=DataName, order=Order);



macro Varf(varfName, meshName, PhName)
    varf varfName(u,v) =
  int2d(meshName)(-u*v*nn+ 1./k^2*Grad(u)'*Gradpmlg(v))
        - int2d(meshName)(1./k^2*betaDotGradg(u)*v)
        - int1d(meshName,borderg*!pmlg)(1i/k*u*v)
        - int2d(meshName)(f*v)
		+ on(borderg*pmlg,u=0); // EOM

//func Pk = P2;  
//fespace Vh(Th,P2);        // P1 fem space
Vh<complex> u,rhs;
Varf(vbp,Th,1)
cout << "running time: "<<clock()-t<<"  define forms"<< endl;
matrix<complex> A = vbp(Vh,Vh,solver = sparsesolver);  // global matrix
cout << "running time: "<<clock()-t<<"  assemble A("<<A.n<<","<<A.m<<")"<< endl;
rhs[] = vbp(0,Vh); 				 // global rhs
cout << "running time: "<<clock()-t<<"  assemble rhs"<< endl;
//u[] = A^-1*rhs[];

cout << "running time: "<<clock()-t<<"  direct solve"<< endl;
Vh ureal = real(u);

plot(ureal,wait=1,fill=1,dim=2,value=1,cmm = "numerical solution");

// Domain decomposition data structures
cout << "setting up dd preconditioner....."<<endl;
npart = npartx * npartx; // for checkerboard
real[int] xian(npart),xibn(npart),yian(npart),yibn(npart); // coordinates for overlapping subdomains
real lengthoverlaps = getARGV("-lengthoverlaps",0.1);
int overlaps = getARGV(,"-overlaps",ceil(lengthoverlaps/h));//getARGV("-delta",2);
lengthoverlaps = overlaps*h;
cout << " num of subdomains: "<< npart <<", overlaps: "<<overlaps<<", length of overlaps: "<<lengthoverlaps<<endl;
real gapratio = getARGV("-gapratio",0.3);
int gaps = getARGV("-gaps",ceil(lengthoverlaps*gapratio/h));//getARGV("-delta",2);
real lengthgaps = gaps*h;
cout << "                     "<<", gaps: "<<gaps<<", length of gaps: "<<lengthgaps<<endl;

for(int i = 0; i<npartx; i++){
    for(int j = 0; j<npartx; j++){
        xian[i*npartx + j] = floor(length/npartx*i/h)*h - overlaps*h;
        xibn[i*npartx + j] = floor(length/npartx*(i+1)/h)*h + overlaps*h;
        yian[i*npartx + j] = floor(height/npartx*j/h)*h - overlaps*h;
        yibn[i*npartx + j] = floor(height/npartx*(j+1)/h)*h + overlaps*h;
    }
    yian[i*npartx] = 0.0;
    yibn[i*npartx + npartx-1] = height;
}
for(int j = 0; j<npartx; j++){
    xian[j] = 0.0;
    xibn[(npartx-1)*npartx + j] = length;
}

mesh[int] Thi(npart);          // sequence of ovr. meshes
matrix<complex>[int] Ai(npart), Ri(npart), Di(npart),Dio(npart);           // local restriction operators
matrix[int] Rir(npart), Dir(npart);           // local restriction operators
matrix<complex>[int] intern(npart), bord(npart);
IFMACRO(!POU)
    macro POU 1 //
ENDIFMACRO
for(int i = 0; i<npartx; i++){
    for(int j = 0; j<npartx; j++){
        int ii = i*npartx +j;
        func locali = (x>= xian[ii] - lengthpml) && (x<=xibn[ii] + lengthpml) &&(y>= yian[ii] - lengthpml) && (y<=yibn[ii] + lengthpml);
        Thi[ii] = trunc(Th, locali, label = 10);
        fespace Vhi(Thi[ii], Pk);
        Rir[ii] = interpolate(Vhi,Vh);
        Ri[ii] = Rir[ii];
        Vhi chii;
        Vhi chiiy;
        
IFMACRO(POU, 1)
        if(i==0)
            chii = (xibn[ii] - x)/overlaps/h/2 * (x>=xibn[ii]-overlaps*h*2) * (x<xibn[ii])
                       + (x<xibn[ii]-overlaps*h*2);
        else if(i==npartx-1)
            chii = (x - xian[ii])/overlaps/h/2 * (x<=xian[ii]+overlaps*h*2) *(x>xian[ii])
                       + (x>xian[ii]+overlaps*h*2);
        else
            chii = (x - xian[ii])/overlaps/h/2 * (x<=xian[ii]+overlaps*h*2)*(x>xian[ii])
                       + (xibn[ii]-x)/overlaps/h/2 * (x>=xibn[ii]-overlaps*h*2)*(x<xibn[ii])
                       + (x>xian[ii]+overlaps*h*2 &&x<xibn[ii]-overlaps*h*2);
        if(j==0)
            chiiy = (yibn[ii] - y)/overlaps/h/2 * (y>=yibn[ii]-overlaps*h*2) * (y<yibn[ii])
                       + (y<yibn[ii]-overlaps*h*2);
        else if(j==npartx-1)
            chiiy = (y - yian[ii])/overlaps/h/2 * (y<=yian[ii]+overlaps*h*2) *(y>yian[ii])
                       + (y>yian[ii]+overlaps*h*2);
        else
            chiiy = (y - yian[ii])/overlaps/h/2 * (y<=yian[ii]+overlaps*h*2)*(y>yian[ii])
                       + (yibn[ii]-y)/overlaps/h/2 * (y>=yibn[ii]-overlaps*h*2)*(y<yibn[ii])
                       + (y>yian[ii]+overlaps*h*2 &&y<yibn[ii]-overlaps*h*2);
ENDIFMACRO

IFMACRO(POU, 2)
        if(i==0)
            chii = exp(-(xibn[ii]-xian[ii])/2/(abs(xibn[ii]-lengthgaps - x) +epst)) * (x<xibn[ii]-lengthgaps);
        else if(i==npartx-1)
            chii =  exp(-(xibn[ii]-xian[ii])/2/(abs(x - xian[ii]+lengthgaps) +epst)) * (x>xian[ii]+lengthgaps);
        else
            chii = exp(-(xibn[ii]-xian[ii])^2/4/(abs(xibn[ii]-lengthgaps - x) +epst)
                                     /(abs(x - xian[ii]+lengthgaps) +epst))
                                     * (x<xibn[ii]-lengthgaps)* (x>xian[ii]+lengthgaps);
        if(j==0)
            chiiy = exp(-(yibn[ii]-yian[ii])/2/(abs(yibn[ii]-lengthgaps - y) +epst)) * (y<yibn[ii]-lengthgaps);
        else if(j==npartx-1)
            chiiy =  exp(-(yibn[ii]-yian[ii])/2/(abs(y - yian[ii]+lengthgaps) +epst)) * (y>yian[ii]+lengthgaps);
        else
            chiiy = exp(-(yibn[ii]-yian[ii])^2/4/(abs(yibn[ii]-lengthgaps - y) +epst)
                                     /(abs(y - yian[ii]+lengthgaps) +epst))
                                     * (y<yibn[ii]-lengthgaps)* (y>yian[ii]+lengthgaps);
ENDIFMACRO

        Vhi chiii;
        chiii[] = chii[].*chiiy[];
        Dir[ii] = chiii[];
        Di[ii] = Dir[ii];
        plot(Th,chiii, cmm="chi", value=1, fill=1,wait=1);

        //plot(Th,chii, cmm="chi", value=1, fill=1,wait=1);
        chii = (x>xian[ii]-lengthpml) && (x < xibn[ii]+lengthpml) && (y>yian[ii]-lengthpml) && (y<yibn[ii]+lengthpml);
        Dir[ii] = chii[];
        intern[ii] = Dir[ii];
        chii = 1 - ((x>xian[ii]-lengthpml) && (x < xibn[ii]+lengthpml) && (y>yian[ii]-lengthpml) && (y<yibn[ii]+lengthpml));
        Dir[ii] = chii[];
        bord[ii] = Dir[ii];

        xia = xian[ii];
        xib = xibn[ii];
        yia = yian[ii];
        yib = yibn[ii];
        varf ai(u,v) = 
                int2d(Thi[ii])(-u*v*nn+1./k^2*Grad(u)'*Gradpml(v))
                    - int2d(Thi[ii])(1./k^2*betaDotGrad(u)*v)
	    			- int1d(Thi[ii],borderg*!pmlg)(1i/k*u*v)
	    			- int1d(Thi[ii],10*!pmli)(1i/k*u*v)
	    			+ on(borderg*pmlg,10*pmli,u=0); // EOM
        //Ai[i] = ai(Vhi,Vhi,solver = UMFPACK, factorize=0, tgv=-1);
        Ai[ii] = ai(Vhi,Vhi,solver = sparsesolver, factorize=true, tgv=tgv);
    }
}

Vh<complex> one = 1,sumall = 0;


for(int i=0; i<npart; ++i)  {
    complex[int] bi(Ri[i].n),ci(Ri[i].n);
    bi = Ri[i]*one[];          // restricts rhs
    ci = Di[i]*bi;                      // partition of unity
    sumall[] += Ri[i]'*ci;                   // prolongation
}
for(int i=0; i<npart; ++i)  {
    complex[int] bi(Ri[i].n);
    bi = Ri[i]*sumall[];
    complex[int] di=Di[i].diag;
    complex[int] ci = di./bi;
    Di[i] = ci;
}


cout << "running time: "<<clock()-t<<"  settup dd"<< endl;
cout << "done! setting up dd preconditioner....."<<endl;
// Iterative solver parameters
real tol=getARGV("-tol",1e-12);    // tolerance for the iterative method
int maxit=getARGV("-maxit",200);    // maximum number of iterations

include "HGMRES.idp"
Vh<complex> un;
Vh<complex> sol,er; // initial guess, final solution and error

int gmres = getARGV("-gmres", 1); // 1 gmres, 0 Stationary iteraive solver
verbosity = 0;
if(gmres==1)
{cout<< "Gmres:"<<endl;
    sol[] =  GMRES(un[], tol, maxit);
    cout << "running time: "<<clock()-t<<"  gmres done"<< endl;
    cout << "done! gmres solve....."<<endl;
}else if(gmres==0)
{cout<< "Stationary iteration:"<<endl;
    sol[] =  StationaryIterateNew(un[], tol, maxit);
    cout << "running time: "<<clock()-t<<"  fixed point done"<< endl;
    cout << "done! fixed point solve....."<<endl;
}else
{   cout<< "Gmres:"<<endl;
    sol[] =  GMRES(un[], tol, maxit);
    cout << "running time: "<<clock()-t<<"  gmres done"<< endl;
    cout << "done! gmres solve....."<<endl;
    cout<< "Stationary iteration:"<<endl;
    sol[] =  StationaryIterateNew(un[], tol, maxit);
    cout << "running time: "<<clock()-t<<"  fixed point done"<< endl;
    cout << "done! fixed point solve....."<<endl;
    }

ureal = real(sol);
plot(ureal,wait=1,fill=1,dim=2,value=1,cmm = "numerical solution by iterative method");

load "iovtk"
Order = [1];
DataName = "u";
string filename= "u" +k+".vtu";
savevtk(filename, Th, ureal, dataname=DataName, order=Order);
cout<< "log runing arguments:"<<endl;
for(int i=0;i<ARGV.n;++i)
{
    cout << ARGV[i] << "  ";
}
t = clock()-t;
cout << endl << "running time: "<<t<< endl;
