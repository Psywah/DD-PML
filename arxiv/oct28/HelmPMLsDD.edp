
include "getARGV.idp"
int mpirank = 0;
func vel = 1;//Ovt(x,y,z);  // km/s

real freq = getARGV("-frequency",0.5); // Hz
func k = 2.*pi*freq/vel;
//func k = getARGV("-wavenumber", 2.*pi*freq/vel);
real lambda = 2.*pi/k;

if (mpirank == 0) cout << "lambda = " << lambda << endl;
if (mpirank == 0) cout << "wave number = " << k << endl;



// dimensions of the domain
real height = 1.;
real length = 2.;

// 10 ppwl
real nppwl = 2.*pi*pow(k,0.25);//10  // can be adjusted to pollution-free 2.*pi*k^{1/2p} : lambda/nppwl = h = k^{-1-1/2p}
int  npl = ceil(nppwl*(height)/lambda);
npl = npl+npl%2;  // number of elements in each direction is even 
                     // so that the point source in the center coincides with a mesh vertex
real h = height/npl;
int  layerspml = getARGV("-deltapml",2);//lambda/h/2; // can be adjusted
// length of the pml
real lengthpml = h*layerspml;
if (mpirank == 0) cout << "nppwl = " << nppwl << ", h = "<< h << ", k to (-1-1/2p) = "<< pow(k, - 1.25)<< endl;
if (mpirank == 0) cout << "layerspml = " << layerspml << ", lengthpml = "<< lengthpml << endl;

// generate mesh
int nply = npl + 2*layerspml;
int nplx = (length+2*lengthpml)/h;
mesh Th = square(nplx, nply, [x*(length+2*lengthpml)-lengthpml, y*(height+2*lengthpml)-lengthpml]);


// boundary label
int borderg = 2;
int[int] chlabpml=[1, borderg, 2, borderg, 3, borderg, 4, borderg];
Th=change(Th,refe=chlabpml);

real epst = 1e-10;

int pmli = 1; // switch between impedance and pml for the subdomain interfaces
int pmlg = 1; // switch between impedance and pml for the global boundary

// pml location and size for the subdomain interfaces. It will be set in the preconditioner assembly
real lengthpmli=lengthpml, xia, xib, yia, yib;

/*
//macro PMLoption 1
//IFMACRO(PMLoption, 1)
    // pml for the subdomain interface
    func sigmaix = pmli * ( (x>=xib)/max(epst,(xib+lengthpmli-x)*k)  +  (x<=xia)/max(epst,(x + lengthpmli-xia)*k) );
    func sigmaiy = pmli * ( (y>=yib)/max(epst,(yib+lengthpmli-y)*k)  +  (y<=yia)/max(epst,(y + lengthpmli-yia)*k) );

    // pml for the global boundaries
    func sigmagx = pmlg * ( (x>=length)/max(epst,(length+lengthpml-x)*k)  +  (x<=0)/max(epst,(x + lengthpml)*k) );
    func sigmagy = pmlg * ( (y>=height)/max(epst,(height+lengthpml-y)*k)  +  (y<=0)/max(epst,(y + lengthpml)*k) );
//ENDIFMACRO
*/

real apml = 1/h/h/layerspml/layerspml*10.0;
    func sigmaix = pmli * ( (x>=xib)*(x-xib)*(x-xib)  +  (x<=xia)*(x-xia)*(x-xia))*apml;
    func sigmaiy = pmli * ( (y>=yib)*(y-yib)*(y-yib)  +  (y<=yia)*(y-yia)*(y-yia))*apml;

    // pml for the global boundaries
    func sigmagx = pmlg * ( (x>=length)*(x-length)*(x-length)  +  (x<=0)*x*x )*apml;
    func sigmagy = pmlg * ( (y>=height)*(y-height)*(y-height)  +  (y<=0)*y*y )*apml;

func Pk = P2;  
fespace Vh(Th,P2);        // P1 fem space
//Vh sigmagxh=sigmagx, sigmagyh=sigmagy;
//plot(sigmagxh,wait=1,fill=1,dim=2,value=1);
//plot(sigmagyh,wait=1,fill=1,dim=2,value=1);

// take the max value of sigma of the two pmls (global boundary and subdomain boundary) for the preconditioner
func sigmax = max ( sigmaix, sigmagx );
func sigmay = max ( sigmaiy, sigmagy );

// point source in the center of the domain
real xs = length/2.;
real ys = height/2.;

// remove singularity at the source when computing error and plotting
func supp = sqrt((x-xs)^2+(y-ys)^2) > lambda;

// exact solution
func exact = supp*1i*(j0(k*sqrt((x-xs)^2+(y-ys)^2))+1i*y0(k*sqrt((x-xs)^2+(y-ys)^2)))/4;

macro Grad(u) [dx(u),dy(u)] // EOM

// gradient for the operator
macro Gradpmlg(u) [(1.+1i*sigmagy)/(1.+1i*sigmagx)*dx(u),
                  (1.+1i*sigmagx)/(1.+1i*sigmagy)*dy(u)] // EOM

// gradient for the preconditioner
macro Gradpml(u) [(1.+1i*sigmay)/(1.+1i*sigmax)*dx(u),
                  (1.+1i*sigmax)/(1.+1i*sigmay)*dy(u)] // EOM

// Definition of the problem to solve
func f = exp(-((x-xs)^2+(y-ys)^2)*k*10);   // right hand side

macro Varf(varfName, meshName, PhName)
    varf varfName(u,v) =
  int2d(meshName)(-(1+1i*sigmagx)*(1+1i*sigmagy)*u*v+ 1./k^2*Grad(u)'*Gradpmlg(v))
        - int1d(meshName,borderg*!pmlg)(1i/k*u*v)
        - int2d(meshName)(f*v)
		+ on(borderg*pmlg,u=0); // EOM

//func Pk = P2;  
//fespace Vh(Th,P2);        // P1 fem space
Vh<complex> u,rhs;
Varf(vbp,Th,1)
matrix<complex> A = vbp(Vh,Vh,solver = UMFPACK);  // global matrix
rhs[] = vbp(0,Vh); 				 // global rhs
u[] = A^-1*rhs[];

Vh ureal = real(u);

plot(ureal,wait=1,fill=1,dim=2,value=1,cmm = "numerical solution");

// Domain decomposition data structures
cout << "setting up dd preconditioner....."<<endl;
int npart = getARGV("-npart", 2);
real[int] xian(npart),xibn(npart),yian(npart),yibn(npart); // coordinates for overlapping subdomains
int overlaps = getARGV("-delta",2);
cout << " num of subdomains: "<< npart <<", overlaps: "<<overlaps<<endl;
for(int i = 0; i<npart; i++){
    xian[i] = floor(length/npart*i/h)*h - overlaps*h;
    xibn[i] = floor(length/npart*(i+1)/h)*h + overlaps*h;
    yian[i] = 0;
    yibn[i] = height;
}
xian[0] = 0.0;
xibn[npart-1] = length;

mesh[int] Thi(npart);          // sequence of ovr. meshes
matrix<complex>[int] Ai(npart), Ri(npart), Di(npart);           // local restriction operators
matrix[int] Rir(npart), Dir(npart);           // local restriction operators
for(int i = 0; i<npart; i++){
    func locali = (x>= xian[i] - lengthpml) && (x<=xibn[i] + lengthpml);
    Thi[i] = trunc(Th, locali, label = 10);
    fespace Vhi(Thi[i], Pk);
    Rir[i] = interpolate(Vhi,Vh);
    Ri[i] = Rir[i];
    Vhi chii;
    if(i==0)
        chii = (xibn[i] - x)/overlaps/h/2 * (x>=xibn[i]-overlaps*h*2) * (x<xibn[i])
                   + (x<xibn[i]-overlaps*h*2);
    else if(i==npart-1)
        chii = (x - xian[i])/overlaps/h/2 * (x<=xian[i]+overlaps*h*2) *(x>xian[i])
                   + (x>xian[i]+overlaps*h*2);
    else
        chii = (x - xian[i])/overlaps/h/2 * (x<=xian[i]+overlaps*h*2)*(x>xian[i])
                   + (xibn[i]-x)/overlaps/h/2 * (x>=xibn[i]-overlaps*h*2)*(x<xibn[i])
                   + (x>xian[i]+overlaps*h*2 &&x<xibn[i]-overlaps*h*2);
    Dir[i] = chii[];
    Di[i] = Dir[i];
    plot(Th,chii, cmm="chi", value=1, fill=1,wait=1);
    xia = xian[i];
    xib = xibn[i];
    yia = yian[i];
    yib = yibn[i];
    varf ai(u,v) = 
             int2d(Thi[i])(-(1+1i*sigmax)*(1+1i*sigmay)*u*v+1./k^2*Grad(u)'*Gradpml(v))
				- int1d(Thi[i],borderg*!pmlg)(1i/k*u*v)
				- int1d(Thi[i],10*!pmli)(1i/k*u*v)
				+ on(borderg*pmlg,10*pmli,u=0); // EOM
    Ai[i] = ai(Vhi,Vhi,solver = UMFPACK, factorize=0);
}

cout << "done! setting up dd preconditioner....."<<endl;
// Iterative solver parameters
real tol=getARGV("-tol",1e-10);    // tolerance for the iterative method
int maxit=getARGV("-maxit",100);    // maximum number of iterations

include "HGMRES.idp"
Vh<complex> un;
Vh<complex> sol,er; // initial guess, final solution and error

bool gmres = getARGV("-gmres", 1);
verbosity = 0;
if(gmres)
    sol[] =  GMRES(un[], tol, maxit);
else
    sol[] =  StationaryIterate(un[], tol, maxit);

ureal = real(sol);
plot(ureal,wait=1,fill=1,dim=2,value=1,cmm = "numerical solution by iterative method");

cout<< "log runing arguments:"<<endl;
for(int i=0;i<ARGV.n;++i)
{
    cout << ARGV[i] << "  ";
}
cout << endl;
